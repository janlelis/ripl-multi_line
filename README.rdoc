== Description
This {ripl}[https://github.com/cldwalker/ripl] plugin allows you to evaluate multiple lines of Ruby code.

== Install
Install the gem with

  gem install ripl-multi_line

== Usage
Add the following line to your <tt>~/.riplrc</tt>

  require 'ripl/multi_line'

<b>Hint:</b> In multi-line situations, you can press <tt>ctrl+c</tt> and the last line will be removed.

== Options
You can customize your multi-line prompt with the <tt>:multi_line_prompt</tt> option. For example, put this into your <tt>~/.riplrc</tt>:

  Ripl.config[:multi_line_prompt] = ' > '

It also takes a proc as value.

Then there is the <tt>:multi_line_history</tt> option. The default value is <tt>:compact</tt> which tries to squeeze your last multi-line block into one line (works best in mri, in about 98% of all cases).

  >> def some_multi_line_block
  |    42
  |  end #=> nil
  # Press <UP>
  >> def some_multi_line_block; 42; end

Another value is <tt>:block</tt>, which joins the multi-line block with new-lines.

To leave the history untouched, set it to <tt>:plain</tt> or a false value.

== AutoIndent
Check out the {ripl-auto_indent}[https://github.com/janlelis/ripl-auto_indent] plugin to get ruby syntax indention.

== MultiLine detection
To use your own multi-line detection engine, implement your version at <tt>lib/ripl/multi_line/your_correct_detection.rb</tt> in which you overwrite <tt>Shell#multiline?</tt> in a <tt>Ripl::MultiLine</tt> sub-module named <tt>YourCorrectDetection</tt> and set <tt>Ripl.config[:multi_line_engine]</tt> to <tt>:your_correct_detection</tt>. See <tt>lib/ripl/multi_line/*.rb</tt> for examples.

Currently available engines:
* <tt>:live_error</tt> (<b>default</b>) - Simply evaluate expression, if it throws a multi-line syntax error, fall back to multi-line input mode. Sounds scary, but works pretty well in practice.
* <tt>:error_check</tt> - Same principle as :live_error, but don't do it live
* <tt>:ripper</tt> - Analyze input with Ripper (comes with 1.9, but there is also a 1.8 gem).
* <tt>:ruby_parser</tt> - Use ruby_parser gem (1.8 only)
* <tt>:irb</tt> - You left irb, but you are still used to its multi-line behaviour? Use irb's RubyLex!

None of the above solutions is perfect, so... maybe it's time to roll your own ;)

== Troubleshooting
<i>Problem:</i> "I've required <tt>ripl-multi_line</tt>, but it doesn't work"

<i>Answer:</i> This is probably caused by a plugin, which overwrites <tt>:before_loop</tt>, but does not call <tt>super</tt> (or you are using ripl-profiles older than 0.2.0). You can manually work around this issue with this snippet (but you should fix the general problem):

  require 'ripl/multi_line/live_error.rb'
  Ripl::MultiLine.engine = Ripl::MultiLine::LiveError
  Ripl::Shell.include Ripl::MultiLine.engine

== TODO
* Write thousands of test cases

== J-_-L
Contributions & influences by cldwalker and godfat.
